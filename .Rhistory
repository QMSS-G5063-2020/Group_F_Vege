county_id=County.ID,
povertyrate=All.Ages.in.Poverty.Percent
)
Income=read.csv("Income.csv")
Income=read.csv("Income.csv")
Income=read.csv("Income.csv")
Income=read.csv("Income.csv")
Income=read.csv("Income.csv")
Income<-Income %>%
rename(
county_fips = State...County.Name,
county_id=County.ID,
povertyrate=All.Ages.in.Poverty.Percent
)
Res=read.csv("Restaurant.csv")
head(Res)
Income=read.csv("Income.csv")
Income<-Income %>%
rename(
county_fips = State...County.Name,
county_id=County.ID,
povertyrate=All.Ages.in.Poverty.Percent
)
library(leaflet)
library(readr)
library(dplyr)
library(tidyr)
library(magrittr)
library(RANN)
library(ggplot2)
library(lubridate)
library(ggmap)
library(sf)
library(geojsonio)
library(ggthemes)
library(viridis)
library(raster)
library(urbnmapr)
library(tidyverse)
library(stringr)
Income=read.csv("Income.csv")
Income<-Income %>%
rename(
county_fips = State...County.Name,
county_id=County.ID,
povertyrate=All.Ages.in.Poverty.Percent
)
head(Income)
a =Res$cuisines
vege <- str_detect(a,"Vegetarian")
ResV <- cbind(vege,Res)
class(ResV$vege)
ResV$vege <- as.numeric(ResV$vege)
ResVV <- subset(ResV,vege==1)
head(ResVV)
ResVVV <- ResVV %>%
dplyr::select(id,city,name,latitude, longitude,phones,paymentTypes,postalCode) %>%
na.omit()
View(ResVVV)
library(sp)
library(maps)
library(maptools)
# The single argument to this function, pointsDF, is a data.frame in which:
#   - column 1 contains the longitude in degrees (negative in the US)
#   - column 2 contains the latitude in degrees
latlong2county <- function(pointsDF) {
# Prepare SpatialPolygons object with one SpatialPolygon
# per county
counties <- map('county', fill=TRUE, col="transparent", plot=FALSE)
IDs <- sapply(strsplit(counties$names, ":"), function(x) x[1])
counties_sp <- map2SpatialPolygons(counties, IDs=IDs,
proj4string=CRS("+proj=longlat +datum=WGS84"))
# Convert pointsDF to a SpatialPoints object
pointsSP <- SpatialPoints(pointsDF,
proj4string=CRS("+proj=longlat +datum=WGS84"))
# Use 'over' to get _indices_ of the Polygons object containing each point
indices <- over(pointsSP, counties_sp)
# Return the county names of the Polygons object containing each point
countyNames <- sapply(counties_sp@polygons, function(x) x@ID)
countyNames[indices]
}
# Test the function using points in Wisconsin and Oregon.
testPoints <- data.frame(x = ResVVV$longitude, y = ResVVV$latitude)
county_list<- latlong2county(testPoints)
county_list_data<-as.data.frame(county_list)
VRes<-cbind(ResVVV,county_list_data)
VRes<-VRes %>%
na.omit
unique(VRes$county_list)
county_name <- as.character(VRes$county_list)
# Remove all before and up to ",":
county_name2 <- gsub(".*,","",county_name)
data <- cbind(county_name2,VRes)
data$county_list <- NULL
data
unique(data$county_name2)
library(leaflet)
library(RColorBrewer)
pal = colorFactor(palette = c("blue", "red"), domain = df$R.D) # Grab a palette
color_vote = pal(df$R.D)
content <- paste("ID:",df$id,"<br/>",
"County:",df$county_name,"<br/>",
"Restaurant Name:",df$name,"<br/>",
"Phones:",df$phones,"<br/>",
"PaymentType:",df$paymentTypes,"<br/>",
"PostCode",df$postalCode,"<br/>"
)
leaflet(df) %>%
addProviderTiles("Stamen.TonerLite") %>%
# Using the Provider Name
addCircles(color=color_vote,
lng = ~longitude,
lat = ~latitude,
popup = content,
fillOpacity = 1,
stroke=FALSE) %>%
addLegend(pal = pal, values = ~df$R.D, title = "Won Party in 2016") %>%
addCircleMarkers(clusterOptions = markerClusterOptions())
counties_sf <- get_urbn_map("counties", sf = TRUE)
spatial_data <- left_join(counties_sf,
Income,
by=c("county_fips"="county_id"))
counties_sf <- get_urbn_map("counties", sf = TRUE)
spatial_data <- left_join(counties_sf,
Income,
by=c("county_fips"="county_id"))
Income<-Income %>%
rename(
county_fips = State...County.Name,
county_id=County.ID,
povertyrate=All.Ages.in.Poverty.Percent
)
counties_sf <- get_urbn_map("counties", sf = TRUE)
spatial_data <- left_join(counties_sf,
Income,
by=c("county_fips"="county_id"))
counties_sf <- get_urbn_map("counties", sf = TRUE)
counties_sf<-counties_sf %>%
filter(state_name == "New York")
spatial_data <- left_join(counties_sf,
Income,
by=c("county_fips"="county_id"))
counties_sf <- get_urbn_map("counties", sf = TRUE)
spatial_data <- left_join(counties_sf,
Income,
by=c("county_fips"="county_id"))
counties_sf <- get_urbn_map("counties", sf = TRUE)
spatial_data <- left_join(counties_sf,
Income,
by=c("county_fips"="county_id"))
ggplot() +
geom_sf(spatial_data,
mapping = aes(fill = povertyrate),
color = "#ffffff", size = 0.25) +
labs(fill = "povertyrate")+
geom_point(data=data,
aes(x=longitude,y=latitude))
ggplot()+
geom_point(data=data,
aes(x=longitude,y=latitude))
ggplot() +
geom_sf(spatial_data,
mapping = aes(fill = povertyrate),
color = "#ffffff", size = 0.25) +
labs(fill = "povertyrate")+
geom_point(data=data,
aes(x=longitude,y=latitude))
Res=read.csv("Restaurant.csv")
head(Res)
Income=read.csv("Income.csv")
Income<-Income %>%
rename(
county_fips = State...County.Name,
county_id=County.ID,
povertyrate=All.Ages.in.Poverty.Percent
)
head(Income)
library(leaflet)
library(readr)
library(dplyr)
library(tidyr)
library(magrittr)
library(RANN)
library(ggplot2)
library(lubridate)
library(ggmap)
library(sf)
library(geojsonio)
library(ggthemes)
library(viridis)
library(raster)
library(urbnmapr)
library(tidyverse)
library(stringr)
a =Res$cuisines
vege <- str_detect(a,"Vegetarian")
ResV <- cbind(vege,Res)
class(ResV$vege)
ResV$vege <- as.numeric(ResV$vege)
ResVV <- subset(ResV,vege==1)
head(ResVV)
ResVVV <- ResVV %>%
dplyr::select(id,city,name,latitude, longitude,phones,paymentTypes,postalCode) %>%
na.omit()
View(ResVVV)
Res=read.csv("Restaurant.csv")
head(Res)
Income=read.csv("Income.csv")
Income<-Income %>%
rename(
county_fips = State...County.Name,
county_id=County.ID,
povertyrate=All.Ages.in.Poverty.Percent
)
head(Income)
library(leaflet)
library(readr)
library(dplyr)
library(tidyr)
library(magrittr)
library(RANN)
library(ggplot2)
library(lubridate)
library(ggmap)
library(sf)
library(geojsonio)
library(ggthemes)
library(viridis)
library(raster)
library(urbnmapr)
library(tidyverse)
library(stringr)
a =Res$cuisines
vege <- str_detect(a,"Vegetarian")
ResV <- cbind(vege,Res)
class(ResV$vege)
ResV$vege <- as.numeric(ResV$vege)
ResVV <- subset(ResV,vege==1)
head(ResVV)
ResVVV <- ResVV %>%
dplyr::select(id,city,name,latitude, longitude,phones,paymentTypes,postalCode) %>%
na.omit()
View(ResVVV)
library(sp)
library(maps)
library(maptools)
# The single argument to this function, pointsDF, is a data.frame in which:
#   - column 1 contains the longitude in degrees (negative in the US)
#   - column 2 contains the latitude in degrees
latlong2county <- function(pointsDF) {
# Prepare SpatialPolygons object with one SpatialPolygon
# per county
counties <- map('county', fill=TRUE, col="transparent", plot=FALSE)
IDs <- sapply(strsplit(counties$names, ":"), function(x) x[1])
counties_sp <- map2SpatialPolygons(counties, IDs=IDs,
proj4string=CRS("+proj=longlat +datum=WGS84"))
# Convert pointsDF to a SpatialPoints object
pointsSP <- SpatialPoints(pointsDF,
proj4string=CRS("+proj=longlat +datum=WGS84"))
# Use 'over' to get _indices_ of the Polygons object containing each point
indices <- over(pointsSP, counties_sp)
# Return the county names of the Polygons object containing each point
countyNames <- sapply(counties_sp@polygons, function(x) x@ID)
countyNames[indices]
}
# Test the function using points in Wisconsin and Oregon.
testPoints <- data.frame(x = ResVVV$longitude, y = ResVVV$latitude)
county_list<- latlong2county(testPoints)
county_list_data<-as.data.frame(county_list)
VRes<-cbind(ResVVV,county_list_data)
VRes<-VRes %>%
na.omit
unique(VRes$county_list)
county_name <- as.character(VRes$county_list)
# Remove all before and up to ",":
county_name2 <- gsub(".*,","",county_name)
data <- cbind(county_name2,VRes)
data$county_list <- NULL
data
unique(data$county_name2)
library(leaflet)
library(RColorBrewer)
pal = colorFactor(palette = c("blue", "red"), domain = df$R.D) # Grab a palette
color_vote = pal(df$R.D)
content <- paste("ID:",df$id,"<br/>",
"County:",df$county_name,"<br/>",
"Restaurant Name:",df$name,"<br/>",
"Phones:",df$phones,"<br/>",
"PaymentType:",df$paymentTypes,"<br/>",
"PostCode",df$postalCode,"<br/>"
)
leaflet(df) %>%
addProviderTiles("Stamen.TonerLite") %>%
# Using the Provider Name
addCircles(color=color_vote,
lng = ~longitude,
lat = ~latitude,
popup = content,
fillOpacity = 1,
stroke=FALSE) %>%
addLegend(pal = pal, values = ~df$R.D, title = "Won Party in 2016") %>%
addCircleMarkers(clusterOptions = markerClusterOptions())
devtools::install_github("UrbanInstitute/urbnmapr")
devtools::install_github("UrbanInstitute/urbnmapr")
install.packages("devtools")
devtools::install_github("UrbanInstitute/urbnmapr")
install.packages("devtools")
Res=read.csv("Restaurant.csv")
head(Res)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("UrbanInstitute/urbnmapr")
devtools::install_github("UrbanInstitute/urbnmapr")
Income=read.csv("Income.csv")
Income<-Income %>%
rename(
county_fips = State...County.Name,
county_id=County.ID,
povertyrate=All.Ages.in.Poverty.Percent
)
library(leaflet)
library(readr)
library(dplyr)
library(tidyr)
library(magrittr)
library(RANN)
library(ggplot2)
library(lubridate)
library(ggmap)
library(sf)
library(geojsonio)
library(ggthemes)
library(viridis)
library(raster)
library(urbnmapr)
library(tidyverse)
library(stringr)
Income=read.csv("Income.csv")
Income<-Income %>%
rename(
county_fips = State...County.Name,
county_id=County.ID,
povertyrate=All.Ages.in.Poverty.Percent
)
Income$county_id=as.character(Income$county_id)
head(Income)
counties_sf <- get_urbn_map("counties", sf = TRUE)
spatial_data <- left_join(counties_sf,
Income,
by=c("county_fips"="county_id"))
ggplot() +
geom_sf(spatial_data,
mapping = aes(fill = povertyrate),
color = "#ffffff", size = 0.25) +
labs(fill = "povertyrate")+
geom_point(data=data,
aes(x=longitude,y=latitude))
counties_sf <- get_urbn_map("counties", sf = TRUE)
counties_sf<-counties_sf %>%
filter(state_name == "New York")
spatial_data <- left_join(counties_sf,
Income,
by=c("county_fips"="county_id"))
ggplot() +
geom_sf(spatial_data,
mapping = aes(fill = povertyrate),
color = "#ffffff", size = 0.25) +
labs(fill = "povertyrate")
ggplot() +
geom_sf(spatial_data,
mapping = aes(fill = povertyrate),
color = "#ffffff", size = 0.25) +
labs(fill = "povertyrate")+
geom_point(data=data,
aes(x=longitude,y=latitude))
ggplot()+
geom_point(data=data,
aes(x=longitude,y=latitude))
library(leaflet)
library(readr)
library(dplyr)
library(tidyr)
library(magrittr)
library(RANN)
library(ggplot2)
library(lubridate)
library(ggmap)
library(sf)
library(geojsonio)
library(ggthemes)
library(viridis)
library(raster)
library(urbnmapr)
library(tidyverse)
library(stringr)
ResVVV <- ResVV %>%
dplyr::select(id,city,name,latitude, longitude,phones,paymentTypes,postalCode) %>%
na.omit()
View(ResVVV)
library(leaflet)
library(RColorBrewer)
pal = colorFactor(palette = c("blue", "red"), domain = df$R.D) # Grab a palette
color_vote = pal(df$R.D)
content <- paste("ID:",df$id,"<br/>",
"County:",df$county_name,"<br/>",
"Restaurant Name:",df$name,"<br/>",
"Phones:",df$phones,"<br/>",
"PaymentType:",df$paymentTypes,"<br/>",
"PostCode",df$postalCode,"<br/>"
)
leaflet(df) %>%
addProviderTiles("Stamen.TonerLite") %>%
# Using the Provider Name
addCircles(color=color_vote,
lng = ~longitude,
lat = ~latitude,
popup = content,
fillOpacity = 1,
stroke=FALSE) %>%
addLegend(pal = pal, values = ~df$R.D, title = "Won Party in 2016") %>%
addCircleMarkers(clusterOptions = markerClusterOptions())
library(leaflet)
library(RColorBrewer)
pal = colorFactor(palette = c("blue", "red")) # Grab a palette
library(leaflet)
library(RColorBrewer)
pal = colorFactor(palette = c("blue", "red"), domain = df$R.D) # Grab a palette
color_vote = pal(df$R.D)
content <- paste("ID:",df$id,"<br/>",
"County:",df$county_name,"<br/>",
"Restaurant Name:",df$name,"<br/>",
"Phones:",df$phones,"<br/>",
"PaymentType:",df$paymentTypes,"<br/>",
"PostCode",df$postalCode,"<br/>"
)
leaflet(df) %>%
addProviderTiles("Stamen.TonerLite") %>%
# Using the Provider Name
addCircles(color=color_vote,
lng = ~longitude,
lat = ~latitude,
popup = content,
fillOpacity = 1,
stroke=FALSE) %>%
addLegend(pal = pal, values = ~df$R.D, title = "Won Party in 2016") %>%
addCircleMarkers(clusterOptions = markerClusterOptions())
library(leaflet)
library(RColorBrewer)
pal = colorFactor(palette = c("blue", "red"), domain = Null) # Grab a palette
library(leaflet)
library(RColorBrewer)
pal = colorFactor(palette = c("blue", "red"), domain = df$R.D) # Grab a palette
color_vote = pal(df$R.D)
content <- paste("ID:",df$id,"<br/>",
"County:",df$county_name,"<br/>",
"Restaurant Name:",df$name,"<br/>",
"Phones:",df$phones,"<br/>",
"PaymentType:",df$paymentTypes,"<br/>",
"PostCode",df$postalCode,"<br/>"
)
leaflet(df) %>%
addProviderTiles("Stamen.TonerLite") %>%
# Using the Provider Name
addCircles(color=color_vote,
lng = ~longitude,
lat = ~latitude,
popup = content,
fillOpacity = 1,
stroke=FALSE) %>%
addLegend(pal = pal, values = ~df$R.D, title = "Won Party in 2016") %>%
addCircleMarkers(clusterOptions = markerClusterOptions())
Income=read.csv("Income.csv")
Income<-Income %>%
rename(
county_fips = State...County.Name,
county_id=County.ID,
povertyrate=All.Ages.in.Poverty.Percent
)
Income$county_id=as.character(Income$county_id)
head(Income)
counties_sf <- get_urbn_map("counties", sf = TRUE)
spatial_data <- left_join(counties_sf,
Income,
by=c("county_fips"="county_id"))
ggplot() +
geom_sf(spatial_data,
mapping = aes(fill = povertyrate),
color = "#ffffff", size = 0.25) +
labs(fill = "povertyrate")+
geom_point(data=data,
aes(x=longitude,y=latitude))
counties_sf <- get_urbn_map("counties", sf = TRUE)
counties_sf<-counties_sf %>%
filter(state_name == "New York")
spatial_data <- left_join(counties_sf,
Income,
by=c("county_fips"="county_id"))
ggplot() +
geom_sf(spatial_data,
mapping = aes(fill = povertyrate),
color = "#ffffff", size = 0.25) +
labs(fill = "povertyrate")
ggplot() +
geom_sf(spatial_data,
mapping = aes(fill = povertyrate),
color = "#ffffff", size = 0.25) +
labs(fill = "povertyrate")+
geom_point(data=data,
aes(x=longitude,y=latitude))
ggplot()+
geom_point(data=data,
aes(x=longitude,y=latitude))
